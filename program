#include <iostream>
#include <stack> //for using stacks

using namespace std;

//Template of each node in the binary tree
struct Node {
    int val;
    struct Node *left, *right;
    Node(int val) {
        this->val = val;
        left = right = NULL;
    }
};

//Function to print post order traversal of binary tree iteratively
void postOrderTraversal(struct Node* root) {
    //One stack to iterate through the tree
    stack<Node*> s;
    s.push(root);
    
    //One stack to hold the output
    stack<int> out;
    
    while(!s.empty()) {
        Node* curr = s.top();
        s.pop();
        
        //Push the output tree value into the output stack
        out.push(curr->val);
        
        //Push in the left child of current node into the stack
        if(curr->left) {
            s.push(curr->left);
        }
        
        //Push in the right child of current node into the stack
        if(curr->right) {
            s.push(curr->right);
        }
    }
    
    //Print the output stored in the output stack
    while(!out.empty()) {
        cout<<out.top()<<endl;
        out.pop();
    }
}

int main()
{
   /* Construct the following tree
               1
             /   \
            /     \
           2       3
          /      /   \
         /      /     \
        4      5       6
              / \
             /   \
            7     8
    */
    
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    root->right->left->left = new Node(7);
    root->right->left->right = new Node(8);
 
    postOrderTraversal(root);
   
   return 0;
}
